---
import TestimonialCard from './TestimonialCard.astro';
import testimonialData from '../data/testimonials.json';
import styles from './testimonials.module.css';

const { testimonials } = testimonialData;
---

<section class={styles.testimonials}>
	<h2>Lo que dicen nuestros clientes</h2>
	<div class={styles.carousel}>
		<div class={styles['carousel-container']}>
			<div class={styles['carousel-track']} id="testimonialTrack">
				{testimonials.map((testimonial) => (
					<div class={styles['carousel-slide']}>
						<TestimonialCard
							text={testimonial.text}
							author={testimonial.author}
							event={testimonial.event}
							image={testimonial.image}
						/>
					</div>
				))}
			</div>
		</div>
	</div>
</section>

<script>
	document.addEventListener('DOMContentLoaded', function() {
		const track = document.getElementById('testimonialTrack') as HTMLElement;
		if (!track) return;

		const slides = Array.from(track.children) as HTMLElement[];
		if (slides.length === 0) return;

		// Iniciar desde el testimonio del medio
		let currentIndex = Math.floor(slides.length / 2);
		let startX: number;
		let isDragging = false;

		function updateSlidePosition() {
			const slideWidth = slides[0].offsetWidth;
			track.style.transform = `translateX(${-currentIndex * slideWidth}px)`;
		}

		track.addEventListener('mousedown', (e) => {
			isDragging = true;
			startX = e.pageX - track.offsetLeft;
		});

		track.addEventListener('touchstart', (e) => {
			isDragging = true;
			startX = e.touches[0].pageX - track.offsetLeft;
		});

		window.addEventListener('mouseup', () => {
			isDragging = false;
		});

		window.addEventListener('touchend', () => {
			isDragging = false;
		});

		track.addEventListener('mousemove', (e) => {
			if (!isDragging) return;
			e.preventDefault();
			const x = e.pageX - track.offsetLeft;
			const walk = x - startX;
			if (walk > 100) {
				currentIndex = (currentIndex - 1 + slides.length) % slides.length;
				updateSlidePosition();
				isDragging = false;
			}
			if (walk < -100) {
				currentIndex = (currentIndex + 1) % slides.length;
				updateSlidePosition();
				isDragging = false;
			}
		});

		track.addEventListener('touchmove', (e) => {
			if (!isDragging) return;
			const x = e.touches[0].pageX - track.offsetLeft;
			const walk = x - startX;
			if (walk > 100) {
				currentIndex = (currentIndex - 1 + slides.length) % slides.length;
				updateSlidePosition();
				isDragging = false;
			}
			if (walk < -100) {
				currentIndex = (currentIndex + 1) % slides.length;
				updateSlidePosition();
				isDragging = false;
			}
		});

		updateSlidePosition();
	});
</script>